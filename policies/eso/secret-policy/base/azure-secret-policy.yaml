apiVersion: policy.open-cluster-management.io/v1
kind: ConfigurationPolicy
metadata:
  name: populate-eso-secretstore-in-all-clusters
spec:
  remediationAction: enforce
  severity: medium
  pruneObjectBehavior: DeleteIfCreated
  object-templates-raw: >
    - complianceType: mustnothave
      objectDefinition:
        kind: ConfigMap
        apiVersion: v1
        metadata:
          name: fake-policy-holder
          namespace: acm-policies
        data:
          fake: holder so policy is not generated empty

    {{hub- $secretsHub := (lookup "v1" "Secret" "acm-policies" "" "eso-category").items hub}}
    {{hub- $secretsHubList := list hub}}
    {{hub- range $secretHub := $secretsHub hub}}
      {{hub- if (and (not (dig "appId" "" $secretHub.data | empty)) (not (dig "appPassword" "" $secretHub.data | empty)) (not (dig "tenantId" "" $secretHub.data | empty)) (not (dig "tenantUrl" "" $secretHub.data | empty))) hub}}
        {{hub- $secretsHubList = concat $secretsHubList (list $secretHub) hub}}
      {{hub- end  hub}}
    {{hub- end hub}}

    {{hub- if (not (empty $secretsHubList)) hub}}
    {{- range (lookup "v1" "Namespace" "" "" "eso-category").items }}

    {{- $categoryLabels := ((index .metadata.labels "eso-category") | split "_") }}
    {{- $categoryLabelsList := list }}
    {{- range $catLabelKey,$catLabelValue := $categoryLabels }}
      {{- $categoryLabelsList = concat $categoryLabelsList (list $catLabelValue) }}
    {{- end }}

    {{hub- range $secretHub := $secretsHubList hub}}
    {{- if has {{hub (index $secretHub.metadata.labels "eso-category") | quote hub}} $categoryLabelsList }}

    - complianceType: mustonlyhave
      objectDefinition:
        kind: Secret
        apiVersion: v1
        metadata:
          name: "{{hub $secretHub.metadata.name hub}}"
          namespace: "{{ .metadata.name }}"
          labels:
          {{hub- range $kLabel, $vLabel := $secretHub.metadata.labels hub}}
            "{{hub $kLabel hub}}": "{{hub $vLabel hub}}"
          {{hub- end hub}}
        data:
          {{hub- range $kHub, $vHub := $secretHub.data hub}}
          "{{hub- $kHub hub}}": "{{hub- $vHub hub}}"
          {{hub- end hub}}

    - complianceType: mustonlyhave
      objectDefinition:
        apiVersion: external-secrets.io/v1beta1
        kind: SecretStore
        metadata:
          name: '{{hub $secretHub.metadata.name hub}}'
          namespace: '{{ .metadata.name }}'
        spec:
          provider:
            azurekv:
              authSecretRef:
                clientId:
                  key: appId
                  name: "{{hub $secretHub.metadata.name hub}}"
                clientSecret:
                  key: appPassword
                  name: "{{hub $secretHub.metadata.name hub}}"
              authType: ServicePrincipal
              environmentType: PublicCloud
              {{- $secret := (lookup "v1" "Secret" .metadata.name {{hub $secretHub.metadata.name | quote hub}}) }}
              {{- if (and (not ($secret | empty)) (not ($secret.data | empty))) }}
              tenantId: '{{ index $secret.data "tenantId" | base64dec }}'
              vaultUrl: '{{ index $secret.data "tenantUrl" | base64dec }}'
              {{- else }}
              tenantId: ''
              vaultUrl: ''
              {{- end }}
    {{- end }}
    {{hub- end hub}}
    {{- end }}
    {{hub- end hub}}
